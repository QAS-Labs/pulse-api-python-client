# coding: utf-8

"""
    Pulse API

    Integrate all of your testing apps with Pulse API

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class OrganizationMemberSchema(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, user_id=None, active=None, role=None):
        """
        OrganizationMemberSchema - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'user_id': 'str',
            'active': 'bool',
            'role': 'float'
        }

        self.attribute_map = {
            'user_id': 'userId',
            'active': 'active',
            'role': 'role'
        }

        self._user_id = user_id
        self._active = active
        self._role = role

    @property
    def user_id(self):
        """
        Gets the user_id of this OrganizationMemberSchema.
        userId of the OrganizationMemberSchema.

        :return: The user_id of this OrganizationMemberSchema.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """
        Sets the user_id of this OrganizationMemberSchema.
        userId of the OrganizationMemberSchema.

        :param user_id: The user_id of this OrganizationMemberSchema.
        :type: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")

        self._user_id = user_id

    @property
    def active(self):
        """
        Gets the active of this OrganizationMemberSchema.
        active of the OrganizationMemberSchema.

        :return: The active of this OrganizationMemberSchema.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """
        Sets the active of this OrganizationMemberSchema.
        active of the OrganizationMemberSchema.

        :param active: The active of this OrganizationMemberSchema.
        :type: bool
        """
        if active is None:
            raise ValueError("Invalid value for `active`, must not be `None`")

        self._active = active

    @property
    def role(self):
        """
        Gets the role of this OrganizationMemberSchema.
        role of the OrganizationMemberSchema.

        :return: The role of this OrganizationMemberSchema.
        :rtype: float
        """
        return self._role

    @role.setter
    def role(self, role):
        """
        Sets the role of this OrganizationMemberSchema.
        role of the OrganizationMemberSchema.

        :param role: The role of this OrganizationMemberSchema.
        :type: float
        """
        if role is None:
            raise ValueError("Invalid value for `role`, must not be `None`")

        self._role = role

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
