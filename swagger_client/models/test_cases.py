# coding: utf-8

"""
    Pulse API

    Integrate all of your testing apps with Pulse API

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class TestCases(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, name=None, type=None, status=None, version=None, project_id=None, effort=None, priority=None, component_ids=None, attachment_ids=None, steps=None, assigned_ids=None, tag_ids=None, start=None, end=None, created=None, updated=None, description=None, is_regression=None, markdown=None, pre_condition=None):
        """
        TestCases - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'name': 'str',
            'type': 'float',
            'status': 'float',
            'version': 'str',
            'project_id': 'str',
            'effort': 'float',
            'priority': 'float',
            'component_ids': 'list[str]',
            'attachment_ids': 'list[str]',
            'steps': 'list[TestStepSchema]',
            'assigned_ids': 'list[str]',
            'tag_ids': 'list[str]',
            'start': 'datetime',
            'end': 'datetime',
            'created': 'UserDateSchema',
            'updated': 'UserDateSchema',
            'description': 'str',
            'is_regression': 'bool',
            'markdown': 'str',
            'pre_condition': 'str'
        }

        self.attribute_map = {
            'id': '_id',
            'name': 'name',
            'type': 'type',
            'status': 'status',
            'version': 'version',
            'project_id': 'projectId',
            'effort': 'effort',
            'priority': 'priority',
            'component_ids': 'componentIds',
            'attachment_ids': 'attachmentIds',
            'steps': 'steps',
            'assigned_ids': 'assignedIds',
            'tag_ids': 'tagIds',
            'start': 'start',
            'end': 'end',
            'created': 'created',
            'updated': 'updated',
            'description': 'description',
            'is_regression': 'isRegression',
            'markdown': 'markdown',
            'pre_condition': 'preCondition'
        }

        self._id = id
        self._name = name
        self._type = type
        self._status = status
        self._version = version
        self._project_id = project_id
        self._effort = effort
        self._priority = priority
        self._component_ids = component_ids
        self._attachment_ids = attachment_ids
        self._steps = steps
        self._assigned_ids = assigned_ids
        self._tag_ids = tag_ids
        self._start = start
        self._end = end
        self._created = created
        self._updated = updated
        self._description = description
        self._is_regression = is_regression
        self._markdown = markdown
        self._pre_condition = pre_condition

    @property
    def id(self):
        """
        Gets the id of this TestCases.
        _id of the TestCases.

        :return: The id of this TestCases.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this TestCases.
        _id of the TestCases.

        :param id: The id of this TestCases.
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this TestCases.
        name of the TestCases.

        :return: The name of this TestCases.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this TestCases.
        name of the TestCases.

        :param name: The name of this TestCases.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def type(self):
        """
        Gets the type of this TestCases.
        type of the TestCases.

        :return: The type of this TestCases.
        :rtype: float
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this TestCases.
        type of the TestCases.

        :param type: The type of this TestCases.
        :type: float
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def status(self):
        """
        Gets the status of this TestCases.
        status of the TestCases.

        :return: The status of this TestCases.
        :rtype: float
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this TestCases.
        status of the TestCases.

        :param status: The status of this TestCases.
        :type: float
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def version(self):
        """
        Gets the version of this TestCases.
        version of the TestCases.

        :return: The version of this TestCases.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this TestCases.
        version of the TestCases.

        :param version: The version of this TestCases.
        :type: str
        """

        self._version = version

    @property
    def project_id(self):
        """
        Gets the project_id of this TestCases.
        projectId of the TestCases.

        :return: The project_id of this TestCases.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """
        Sets the project_id of this TestCases.
        projectId of the TestCases.

        :param project_id: The project_id of this TestCases.
        :type: str
        """
        if project_id is None:
            raise ValueError("Invalid value for `project_id`, must not be `None`")

        self._project_id = project_id

    @property
    def effort(self):
        """
        Gets the effort of this TestCases.
        effort of the TestCases.

        :return: The effort of this TestCases.
        :rtype: float
        """
        return self._effort

    @effort.setter
    def effort(self, effort):
        """
        Sets the effort of this TestCases.
        effort of the TestCases.

        :param effort: The effort of this TestCases.
        :type: float
        """

        self._effort = effort

    @property
    def priority(self):
        """
        Gets the priority of this TestCases.
        priority of the TestCases.

        :return: The priority of this TestCases.
        :rtype: float
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """
        Sets the priority of this TestCases.
        priority of the TestCases.

        :param priority: The priority of this TestCases.
        :type: float
        """
        if priority is None:
            raise ValueError("Invalid value for `priority`, must not be `None`")

        self._priority = priority

    @property
    def component_ids(self):
        """
        Gets the component_ids of this TestCases.
        componentIds of the TestCases.

        :return: The component_ids of this TestCases.
        :rtype: list[str]
        """
        return self._component_ids

    @component_ids.setter
    def component_ids(self, component_ids):
        """
        Sets the component_ids of this TestCases.
        componentIds of the TestCases.

        :param component_ids: The component_ids of this TestCases.
        :type: list[str]
        """

        self._component_ids = component_ids

    @property
    def attachment_ids(self):
        """
        Gets the attachment_ids of this TestCases.
        attachmentIds of the TestCases.

        :return: The attachment_ids of this TestCases.
        :rtype: list[str]
        """
        return self._attachment_ids

    @attachment_ids.setter
    def attachment_ids(self, attachment_ids):
        """
        Sets the attachment_ids of this TestCases.
        attachmentIds of the TestCases.

        :param attachment_ids: The attachment_ids of this TestCases.
        :type: list[str]
        """

        self._attachment_ids = attachment_ids

    @property
    def steps(self):
        """
        Gets the steps of this TestCases.
        steps of the TestCases.

        :return: The steps of this TestCases.
        :rtype: list[TestStepSchema]
        """
        return self._steps

    @steps.setter
    def steps(self, steps):
        """
        Sets the steps of this TestCases.
        steps of the TestCases.

        :param steps: The steps of this TestCases.
        :type: list[TestStepSchema]
        """

        self._steps = steps

    @property
    def assigned_ids(self):
        """
        Gets the assigned_ids of this TestCases.
        assignedIds of the TestCases.

        :return: The assigned_ids of this TestCases.
        :rtype: list[str]
        """
        return self._assigned_ids

    @assigned_ids.setter
    def assigned_ids(self, assigned_ids):
        """
        Sets the assigned_ids of this TestCases.
        assignedIds of the TestCases.

        :param assigned_ids: The assigned_ids of this TestCases.
        :type: list[str]
        """

        self._assigned_ids = assigned_ids

    @property
    def tag_ids(self):
        """
        Gets the tag_ids of this TestCases.
        tagIds of the TestCases.

        :return: The tag_ids of this TestCases.
        :rtype: list[str]
        """
        return self._tag_ids

    @tag_ids.setter
    def tag_ids(self, tag_ids):
        """
        Sets the tag_ids of this TestCases.
        tagIds of the TestCases.

        :param tag_ids: The tag_ids of this TestCases.
        :type: list[str]
        """

        self._tag_ids = tag_ids

    @property
    def start(self):
        """
        Gets the start of this TestCases.
        start of the TestCases.

        :return: The start of this TestCases.
        :rtype: datetime
        """
        return self._start

    @start.setter
    def start(self, start):
        """
        Sets the start of this TestCases.
        start of the TestCases.

        :param start: The start of this TestCases.
        :type: datetime
        """
        if start is None:
            raise ValueError("Invalid value for `start`, must not be `None`")

        self._start = start

    @property
    def end(self):
        """
        Gets the end of this TestCases.
        end of the TestCases.

        :return: The end of this TestCases.
        :rtype: datetime
        """
        return self._end

    @end.setter
    def end(self, end):
        """
        Sets the end of this TestCases.
        end of the TestCases.

        :param end: The end of this TestCases.
        :type: datetime
        """

        self._end = end

    @property
    def created(self):
        """
        Gets the created of this TestCases.

        :return: The created of this TestCases.
        :rtype: UserDateSchema
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this TestCases.

        :param created: The created of this TestCases.
        :type: UserDateSchema
        """

        self._created = created

    @property
    def updated(self):
        """
        Gets the updated of this TestCases.

        :return: The updated of this TestCases.
        :rtype: UserDateSchema
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """
        Sets the updated of this TestCases.

        :param updated: The updated of this TestCases.
        :type: UserDateSchema
        """

        self._updated = updated

    @property
    def description(self):
        """
        Gets the description of this TestCases.
        description of the TestCases.

        :return: The description of this TestCases.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this TestCases.
        description of the TestCases.

        :param description: The description of this TestCases.
        :type: str
        """

        self._description = description

    @property
    def is_regression(self):
        """
        Gets the is_regression of this TestCases.
        isRegression of the TestCases.

        :return: The is_regression of this TestCases.
        :rtype: bool
        """
        return self._is_regression

    @is_regression.setter
    def is_regression(self, is_regression):
        """
        Sets the is_regression of this TestCases.
        isRegression of the TestCases.

        :param is_regression: The is_regression of this TestCases.
        :type: bool
        """

        self._is_regression = is_regression

    @property
    def markdown(self):
        """
        Gets the markdown of this TestCases.
        markdown of the TestCases.

        :return: The markdown of this TestCases.
        :rtype: str
        """
        return self._markdown

    @markdown.setter
    def markdown(self, markdown):
        """
        Sets the markdown of this TestCases.
        markdown of the TestCases.

        :param markdown: The markdown of this TestCases.
        :type: str
        """

        self._markdown = markdown

    @property
    def pre_condition(self):
        """
        Gets the pre_condition of this TestCases.
        preCondition of the TestCases.

        :return: The pre_condition of this TestCases.
        :rtype: str
        """
        return self._pre_condition

    @pre_condition.setter
    def pre_condition(self, pre_condition):
        """
        Sets the pre_condition of this TestCases.
        preCondition of the TestCases.

        :param pre_condition: The pre_condition of this TestCases.
        :type: str
        """

        self._pre_condition = pre_condition

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
